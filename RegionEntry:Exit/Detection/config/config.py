import os 
import numpy as np

##############################################
# Choose the dataset
##############################################
Dataset_Path        = '/media/venkatesh/Data/Datasets' # '/Dataset_Path'

USE_KITTI_DATASET   = True
USE_D2_CITY_DATASET = not USE_KITTI_DATASET

'''
--------------------------------------
Default : Use_GT_Data = True
--------------------------------------
By default objectness mask is generated by the object detection module
and is used for object tracking. if you wish to execute the pipeline without
objectness mask than the make

track_with_object_mask = False

NOTE:
    - the model trained on D2-city is with objectness mask information
    - the model without objectness information is trained Only on KIITI
'''

track_with_object_mask              = True

'''
--------------------------------------
Default : use_obj_map = False
--------------------------------------
Detection with Object mask: Use objectiveness map to reject the ancor candidates
This is not reported in the deliverable, if you wish to use anchor 
rejection based on objectiveness map then set 

use_obj_map = True

'''
use_obj_map                         = False

'''
--------------------------------------
Default : Use_GT_Data = False
--------------------------------------
By default object localisation information from Object detection
module is used as input to tracking module. if you wish to use
the grouth-truth annotation instead than enable this variable to
use groundth-truth information.

make Use_GT_Data = True

'''
Use_GT_Data                         = True

'''
--------------------------------------
Default : USE_particle_Filter = False
--------------------------------------
By deault Kalman filter is used for tracking. if you wish to perform 
tracking using particle-PHD filter then make

USE_particle_Filter = True

'''
USE_particle_Filter                 = False

'''
-------------------------------------------------------
Default : USE_hist_feature_particle_filter    = True
-------------------------------------------------------
By deafult histogram and IoU are used to compute the weights of particles
if you wish to compute the weights only using IoU than make 
USE_hist_feature_particle_filter = False

'''
USE_hist_feature_particle_filter    = True

##############################################
# Save the Results
##############################################

'''
for visulise inspection of the tracking results make this variable True else make it false
'''
save_results_as_image_file  = True
plot_particles_on_image     = True

# This is used for evaluation purpose so make this always True
# If you want to visualise only than
save_results_as_text_file   = True

# Save/display the graph
save_graph                  = False
display_graph               = False 

##############################################
# Object Tracking parameters
##############################################
    
max_age = 2 # no.of consecutive unmatched detection before
             # a track is deleted
min_hits = 1  # no. of consecutive matches needed to establish a track

#No_avg_histogram = 4
#avg_hist_weights = np.array([0.45,0.25,0.15,0.10])
No_avg_histogram = 1
avg_hist_weights = np.array([1.0])#,0,0,0])

#-------------------------------------------------
# Particle PHD parameters
#-------------------------------------------------

num_particles   = 100
h_bin_size      = 50
s_bin_size      = 60
sigma           = [[0.2, 0.9, 0.5, 0.5, 0.5],
                   [0.2, 0.9, 0.5, 0.5, 0.5]]

##############################################
# Input image and label image folder name
##############################################

if USE_D2_CITY_DATASET and USE_KITTI_DATASET:
    print('Data selection Error: Please choose one of the dataset\n' /
           'both USE_KITTI_DATASET and USE_D2_CITY_DATASET are set TRUE')    
    exit(0)
else:
    if USE_KITTI_DATASET:
        Dataset_Dir          = os.path.join(Dataset_Path, 'KITTI/train/image_02') #'/media/venkatesh/Data/Datasets/KITTI/image_02' # '/Dataset_Path'
    
    if USE_D2_CITY_DATASET:
        Dataset_Dir          = os.path.join(Dataset_Path, 'D2_City/val/video/0008') #'/media/venkatesh/Data/Datasets/D2_City/val/video/0008' # '/Dataset_Path'

Image_file_extension = 'png' # image file extension in the dataset considered

if USE_KITTI_DATASET:
    if track_with_object_mask:
        Save_Results_Dir     = os.path.join('Results','Kitti_v2') # Directory to save the results and graph
    else:
        Save_Results_Dir     = os.path.join('Results','Kitti_v1') # Directory to save the results and graph

if USE_D2_CITY_DATASET:
    Save_Results_Dir     = os.path.join('Results','D2_City') # Directory to save the results and graph
    
if USE_particle_Filter: 
    Save_Results_Dir     +=  '_{}_PF'.format(num_particles) # Directory to save the results and graph
else:
    Save_Results_Dir     += '_KF' # Directory to save the results and graph
    
    
Complexity_Analysis_Dir = 'Complexity_Analysis'

if USE_KITTI_DATASET:
    sequence_to_test     = os.path.join(os.path.dirname(__file__),'KITTI_evaluate.seqmap') # List of sequence name considered for evaluation
    GT_Tracking_Dir      = os.path.join('GT_Tracking', 'KITTI')

if USE_D2_CITY_DATASET:
    D2_city_sequence     = os.path.join(os.path.dirname(__file__),'D2_City_evaluate.seqmap')
    GT_Tracking_Dir      = os.path.join('GT_Tracking', 'D2_City')

if Use_GT_Data:
    evaluate_Dir_name    = 'OT_GT_' + Save_Results_Dir
else:
    evaluate_Dir_name    = 'OT_DET_' + Save_Results_Dir

if USE_KITTI_DATASET:
    GT_dir_info              = 'label_02_KITTI'

if USE_D2_CITY_DATASET:
    GT_dir_info              = 'label_D2_City'
    
#----------------------------------------------------------------------------------------
# Create the dir to save the results for evaluation
#----------------------------------------------------------------------------------------
evaluate_results_path = 'Evaluation/results'
evaluate_Dir          = os.path.join(evaluate_results_path ,evaluate_Dir_name)
evaluate_data_dir   = os.path.join(evaluate_Dir,'data')
# if the evaluate_Dir exists
path = evaluate_data_dir#os.path.join('..',evaluate_data_dir)
if not os.path.exists(path):
    os.makedirs(path)

## if the evaluate_data_Dir exists#
#path = evaluate_data_dir #os.path.join('..',evaluate_data_dir)
#if not os.path.exists(path):
#    os.makedirs(path)
#---------------------------------------------------------------------------------------
    
#---------------------------------------------------------------------------------------
# Trained model file
#---------------------------------------------------------------------------------------
    
if USE_KITTI_DATASET:
    if track_with_object_mask:
        Trained_model_filename = 'KITTI_09170946_0.72_4cls_objmask' # Trained on 4 class + Object Mask
    else:
        Trained_model_filename = 'KITTI_09110948_0.72_4cls' # Trained on 4 class without saliency

if USE_D2_CITY_DATASET:
    Trained_model_filename = 'D2City_09250943_0.67_5cls_objmask' # Trained on 5 class + Object Mask

Trained_model_filepath = os.path.join('weights', Trained_model_filename)


#-------------------------------------------
# class label information
#-------------------------------------------
if USE_KITTI_DATASET:
#    class_labels    = ['Car', 'Van', 'Truck', 'Pedestrian']
#     class_labels    = ['person','bicycle','car','bike','bus','truck']
    class_labels    = [' ','Car', 'Truck']
    trainedWidth    = 1242
    trainedHeight   = 375
    preprocess_img_width   = 1238
    preprocess_img_height  = 1238
    colorDict = { "car": (255, 0, 255),
                  "truck": (124, 252, 0)}
    

if USE_D2_CITY_DATASET:
#    class_labels    = ['Car', 'Van', 'Bus', 'Truck', 'Person'] 
    class_labels    = ['Car', 'Truck']
    trainedWidth    = 1280
    trainedHeight   = 720
    preprocess_img_width   = 1280
    preprocess_img_height  = 720

##############################################
# END
##############################################